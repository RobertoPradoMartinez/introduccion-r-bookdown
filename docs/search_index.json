[
["index.html", "Taller de Introducción a R Capítulo 1 Introducción al taller", " Taller de Introducción a R Sonia Mendizábal 2017-09-13 Capítulo 1 Introducción al taller Programa I. Introducción a Herramientas II. Tipos de Datos III. Funciones IV. Iteraciones V. Visualización VI. Manipulación VII. Caso Práctico "],
["introduccion-a-herramientas.html", "Capítulo 2 Introducción a Herramientas", " Capítulo 2 Introducción a Herramientas ¿Qué es R? R es un lenguaje de programación con enfoque al análisis estadístico. Además: Software libre (no dice qué puedes o no hacer con el software) De código abierto (todo el código de R se inspecciona) Funcionalidad adicional está en paquetes que la comunidad contribuye. "],
["r-console.html", "2.1 R Console", " 2.1 R Console "],
["rstudio.html", "2.2 RStudio", " 2.2 RStudio RStudio es una compañía que crea productos/software relacionados a R. El producto más conocido es el ambiente de desarrollo: RStudioIDE (Integrated Development Environment) "],
["descarga.html", "2.3 Descarga", " 2.3 Descarga Necesitamos instalar: R: Comprenhensive R Archive Network (CRAN) https://cran.r-project.org/ RStudio IDE https://www.rstudio.com/products/rstudio/download/ "],
["rstudio-layout.html", "2.4 RStudio Layout", " 2.4 RStudio Layout Consola Escribir en línea de comandos. Código Desarrollo de código. Documento RScript Más shorcuts para escribir "],
["tiposdatos.html", "Capítulo 3 Tipos de Datos", " Capítulo 3 Tipos de Datos En R existen cinco tipos de datos básicos: 3.1 Vector 3.2 Matriz 3.3 Factor 3.4 Data frame 3.5 Lista "],
["vectores.html", "3.1 Vectores", " 3.1 Vectores Un vector es un arreglo de una dimensión. 3.1.1 Tipo de vectores En R existen tres clases principales de vectores y se crean con la función combine c() . Numérico num_vec &lt;- c(-1, 2.5, 3, 4, 5.1) Caracter cha_vec &lt;- c(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Sat&quot;, &quot;Sun&quot;) Lógico boo_vec &lt;- c(TRUE, FALSE, FALSE, TRUE, TRUE, FALSE) En R se asigna el objeto a un nombre con: &lt;-. La función class() nos dice cuál es la clase o tipo del vector. class(num_vec) ## [1] &quot;numeric&quot; Otra función importante es length() que nos dice cuál es la longitud del vector. length(num_vec) ## [1] 5 Ej: Ganancias - Ruleta y poker Mis ganancias de poker por día de la semana son: poker_gan &lt;- c(150, 178, -6, 166, -80, -119, -142) print(poker_gan) ## [1] 150 178 -6 166 -80 -119 -142 Mis ganancias en ruleta son: lunes -48 martes 151 miércoles 198 jueves -16 viernes 134 sábado -153 domingo 126 Usando la función combine c() asigna las ganancias por día al vector ruleta_gan. ruleta_gan &lt;- c() print(ruleta_gan) 3.1.2 Nombres de vectores La función names() nos permite nombrar los elementos de cada vector. Por ejemplo, a cada elemento de las ganancias de poker del ejercicio anterior, asignaremos el nombre del día de la semana en que se obtuvieron. dias &lt;- c(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;) names(poker_gan) &lt;- dias print(poker_gan) ## Mon Tue Wed Thu Fri Sat Sun ## 150 178 -6 166 -80 -119 -142 Ej: Días - Ruleta y poker. Asigna los nombres del día de la semana a cada elemento del vector de las ganancias de ruleta. names(ruleta_gan) &lt;- print(ruleta_gan) 3.1.3 Selección de elementos en vectores La selección de elementos de un vector se realiza indicando las posiciones a seleccionar entre [ ]. Estas posiciones pueden indicarse por medio de un vector numérico o de caracteres si los elementos del vector están nombrados. Vector numérico: poker_gan[ c(1, 5) ] ## Mon Fri ## 150 -80 La función seq() o el uso de dos puntos : permiten crear un vector de secuencias numéricas: poker_gan[ 1:3 ] ## Mon Tue Wed ## 150 178 -6 poker_gan[ seq(from = 7, to = 5) ] ## Sun Sat Fri ## -142 -119 -80 Nombres: poker_gan[ c(&quot;Mon&quot;, &quot;Tue&quot;)] ## Mon Tue ## 150 178 Ej: Miercoles - Ruleta y poker. Extrae las ganancias de ambos juegos del día miercoles y calcula la ganancia total de ese día. wed_gan &lt;- poker_gan[ ] + ruleta_gan[] print(wed_gan) 3.1.4 ¿Qué pasa si sumamos los días de fin de semana? Seleccionamos únicamente los días de fin de semana para ambos juegos. poker_fin &lt;- poker_gan[ dias[5:7] ] poker_fin ## Fri Sat Sun ## -80 -119 -142 ruleta_fin &lt;- ruleta_gan[ 5:7 ] ruleta_fin ## Fri Sat Sun ## 134 -153 126 ¿Qué pasa cuando sumo los vectores? poker_fin + ruleta_fin ## Fri Sat Sun ## 54 -272 -16 Element wise: En R para cualquier operación (+, -, *, /) de vectores, las operaciones son elemento a elemento (element wise). Por ejemplo, al sumar vectores: la primera posición del primer vector se suma con la primera posicion del segundo vector, la segunda posición del primer vector se suma con la segunda posicion del segundo vector y así sucesivamente. Ej: Diario - Ruleta y poker. Calcula las ganancias diarias y asígnalas al objeto diario_gan. ¿Qué día se gana más y qué día se pierde más? diario_gan &lt;- Usando el vector diario_gan y la función sum() calcula las ganancias totales de la semana. sum(diario_gan) ¿Me conviene seguir jugando? ## Mon Tue Wed Thu Fri Sat Sun ## 102 329 192 150 54 -272 -16 3.1.5 Comparación de elementos La comparación de elementos se realiza con los siguientes comandos: &gt; mayor a &gt;= mayor o igual &lt; menor a &lt;= menor o igual a == igual a != distinto de %in% contenido en Este tipo de operaciones regresan un vector lógico dependiendo si la condición se cumple o no. poker_gan ## Mon Tue Wed Thu Fri Sat Sun ## 150 178 -6 166 -80 -119 -142 poker_pos &lt;- poker_gan &gt;= 0 print(poker_pos) ## Mon Tue Wed Thu Fri Sat Sun ## TRUE TRUE FALSE TRUE FALSE FALSE FALSE Este vector lógico también nos ayuda a seleccionar los elementos del vector que cumplen la condición. poker_gan[poker_pos] ## Mon Tue Thu ## 150 178 166 El comando %in% regresa un vector lógico si los elementos indicados están contenidos en el vector. ciudades &lt;- c(&quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Monterrey&quot;, &quot;Monterrey&quot;, &quot;Guadalajara&quot;, &quot;Mexico&quot;, &quot;Mexico&quot;) ciudades_cond &lt;- ciudades %in% c(&quot;Mexico&quot;, &quot;Monterrey&quot;) ciudades_cond ## [1] FALSE FALSE TRUE TRUE FALSE TRUE TRUE sum(ciudades_cond) ## [1] 4 Otra función importante es la función which(), que regresa las posiciones numéricas del vector en las que se cumple la condición: ciudades_pos &lt;- which(ciudades_cond) ciudades_pos ## [1] 3 4 6 7 ciudades[ciudades_pos] ## [1] &quot;Monterrey&quot; &quot;Monterrey&quot; &quot;Mexico&quot; &quot;Mexico&quot; 3.1.6 Gráfica de vectores En R existe la función plot()que permite crear gráficas usando vectores numéricos. plot(x = poker_gan) plot(x = poker_gan, y = ruleta_gan) Un histograma del vector se crea con la función hist(). hist(x = poker_gan) 3.1.7 Vectores de distribuciones En R existen funciones que generan vectores de realizaciones aleatorias de distribuciones probabilísticas. Distribución Normal: norm_vec &lt;- rnorm(n = 100, mean = 0, sd = 10) hist(norm_vec) Distribución Uniforme: unif_vec &lt;- runif(n = 100, min = 10, max = 100) hist(unif_vec) Ej: Normal Usando la función rnorm() genera 1000 realizaciones de una distribución con media \\(\\mu\\) 10 y desviación estándar \\(\\sigma\\) 5. norm1000_vec &lt;- rnorm() Realiza un histograma del vector obtenido. hist() "],
["matrices.html", "3.2 Matrices", " 3.2 Matrices Una matriz es un arreglo de dos dimensiones en el que todos los elementos son del mismo tipo, por ejemplo: numéricos 3.2.1 Crear una matriz La función matrix() permite crear la matriz de un vector especificando las dimensiones, por ejemplo: matrix(data = 1:9, nrow = 3, ncol = 3, byrow = F) ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 En el siguiente vector se presentan los ingresos totales y de lanzamiento de cada película de la saga Harry Potter. Box Office Mojo: Harry Potter sales_hp &lt;- c(497066400, 426630300, 401608200, 399302200, 377314200, 359788300, 357233500, 328833900, 141823200, 189432500, 142414700, 135197600, 99635700, 92756000, 134119300, 138752100) sales_mat &lt;- matrix(sales_hp, nrow = 8, byrow = F) sales_mat ## [,1] [,2] ## [1,] 497066400 141823200 ## [2,] 426630300 189432500 ## [3,] 401608200 142414700 ## [4,] 399302200 135197600 ## [5,] 377314200 99635700 ## [6,] 359788300 92756000 ## [7,] 357233500 134119300 ## [8,] 328833900 138752100 La función dim() regresa la dimensión de la matriz (renglones y columnas). dim(sales_mat) ## [1] 8 2 La función nrow() regresa el número de renglones de la matriz y ncol() el número de columnas. nrow(sales_mat) ## [1] 8 ncol(sales_mat) ## [1] 2 3.2.2 Nombres de matrices En R es posible agregar nombres a los renglones y columnas de una matriz con las funciones colnames() y rownames(). Considerando los siete títulos de la saga, asignamos los títulos de las películas a los renglones con la función rownames(): titles_hp &lt;- c( &quot;1. HP and the Sorcerer&#39;s Stone&quot;, &quot;8. HP and the Deathly Hallows Part 2&quot;, &quot;4. HP and the Goblet of Fire&quot;, &quot;2. HP and the Chamber of Secrets&quot;, &quot;5. HP and the Order of the Phoenix&quot;, &quot;6. HP and the Half-Blood Prince&quot;, &quot;3. HP and the Prisoner of Azkaban&quot;, &quot;7. HP and the Deathly Hallows Part 1&quot;) rownames(sales_mat) &lt;- titles_hp sales_mat ## [,1] [,2] ## 1. HP and the Sorcerer&#39;s Stone 497066400 141823200 ## 8. HP and the Deathly Hallows Part 2 426630300 189432500 ## 4. HP and the Goblet of Fire 401608200 142414700 ## 2. HP and the Chamber of Secrets 399302200 135197600 ## 5. HP and the Order of the Phoenix 377314200 99635700 ## 6. HP and the Half-Blood Prince 359788300 92756000 ## 3. HP and the Prisoner of Azkaban 357233500 134119300 ## 7. HP and the Deathly Hallows Part 1 328833900 138752100 Ej: Tipo de ventas. Usando la función colnames() asigna el nombre del tipo de ventas a cada columna: sales_hp &lt;- c(&quot;total&quot;, &quot;release_date&quot;) colnames() &lt;- sales_mat 3.2.3 Selección de elementos en una matriz Al igual que un vector, los elementos de una matriz pueden seleccionarse con un vector de posiciones o un vector de nombres. Pero, en este se define la posición de ambas dimensiones, renglones y columnas [ , ]. Por ejemplo, si queremos obtener una submatriz para las primeras tres películas de las ventas : sales_mat[c(1, 4, 7), 1:2] ## total release_date ## 1. HP and the Sorcerer&#39;s Stone 497066400 141823200 ## 2. HP and the Chamber of Secrets 399302200 135197600 ## 3. HP and the Prisoner of Azkaban 357233500 134119300 O bien: titles_first3 &lt;- c(&quot;1. HP and the Sorcerer&#39;s Stone&quot;, &quot;2. HP and the Chamber of Secrets&quot;, &quot;3. HP and the Prisoner of Azkaban&quot;) sales_mat[titles_first3, ] ## total release_date ## 1. HP and the Sorcerer&#39;s Stone 497066400 141823200 ## 2. HP and the Chamber of Secrets 399302200 135197600 ## 3. HP and the Prisoner of Azkaban 357233500 134119300 Para seleccionar todos los elementos de una dimensión se deja vacía la posición. 3.2.4 Operaciones en matrices Al igual que los vectores, las operaciones son elemento a elemento o element wise. Siguiendo con el ejemplo de ingresos, para facilitar la lectura de los datos dividimos entre un millón cada valor. sales_mat_mill &lt;- sales_mat/1e6 sales_mat_mill ## total release_date ## 1. HP and the Sorcerer&#39;s Stone 497.0664 141.8232 ## 8. HP and the Deathly Hallows Part 2 426.6303 189.4325 ## 4. HP and the Goblet of Fire 401.6082 142.4147 ## 2. HP and the Chamber of Secrets 399.3022 135.1976 ## 5. HP and the Order of the Phoenix 377.3142 99.6357 ## 6. HP and the Half-Blood Prince 359.7883 92.7560 ## 3. HP and the Prisoner of Azkaban 357.2335 134.1193 ## 7. HP and the Deathly Hallows Part 1 328.8339 138.7521 Lo mismo sucede con un vector. Supongamos que el siguiente vector contiene el número de cines en los que se exhibió cada película. theaters_vec &lt;- c(3672, 4375, 3858, 3682, 4285, 4325, 3855, 4125) theaters_vec ## [1] 3672 4375 3858 3682 4285 4325 3855 4125 Calculemos el ingreso promedio por cada cine para el total de ingresos y en la fecha de lanzamiento. sales_mat_avg &lt;- sales_mat/theaters_vec sales_mat_avg ## total release_date ## 1. HP and the Sorcerer&#39;s Stone 135366.67 38622.88 ## 8. HP and the Deathly Hallows Part 2 97515.50 43298.86 ## 4. HP and the Goblet of Fire 104097.51 36914.13 ## 2. HP and the Chamber of Secrets 108447.09 36718.52 ## 5. HP and the Order of the Phoenix 88054.66 23252.21 ## 6. HP and the Half-Blood Prince 83188.05 21446.47 ## 3. HP and the Prisoner of Azkaban 92667.57 34791.00 ## 7. HP and the Deathly Hallows Part 1 79717.31 33636.87 Ej: Total de visitas Calcula el número de visitas si el costo del boleto promedio es de $8.89 dólares. visits_mat &lt;- sales_mat visits_mat 3.2.5 Operaciones por dimensiones En R existen funciones que permiten realizar operaciones por columnas o renglones de una matriz. colSums() colSums(sales_mat_mill) ## total release_date ## 3147.777 1074.131 rowSums() rowSums(sales_mat_mill) ## 1. HP and the Sorcerer&#39;s Stone 8. HP and the Deathly Hallows Part 2 ## 638.8896 616.0628 ## 4. HP and the Goblet of Fire 2. HP and the Chamber of Secrets ## 544.0229 534.4998 ## 5. HP and the Order of the Phoenix 6. HP and the Half-Blood Prince ## 476.9499 452.5443 ## 3. HP and the Prisoner of Azkaban 7. HP and the Deathly Hallows Part 1 ## 491.3528 467.5860 Ej: Ingresos promedio Usando la función colMeans() calcula el ingreso promedio total y en la fecha de lanzamiento. avg_income &lt;- colMeans() 3.2.6 Nuevos valores Existen funciones que nos permiten aumentar la dimensión de una matriz. Para columnas cbind() y reglones rbind(). Agreguemos el vector de número de salas a la matriz de ingresos por millón. sales_mat_theat &lt;- cbind(sales_mat_mill, theaters_vec) sales_mat_theat ## total release_date theaters_vec ## 1. HP and the Sorcerer&#39;s Stone 497.0664 141.8232 3672 ## 8. HP and the Deathly Hallows Part 2 426.6303 189.4325 4375 ## 4. HP and the Goblet of Fire 401.6082 142.4147 3858 ## 2. HP and the Chamber of Secrets 399.3022 135.1976 3682 ## 5. HP and the Order of the Phoenix 377.3142 99.6357 4285 ## 6. HP and the Half-Blood Prince 359.7883 92.7560 4325 ## 3. HP and the Prisoner of Azkaban 357.2335 134.1193 3855 ## 7. HP and the Deathly Hallows Part 1 328.8339 138.7521 4125 Ej: Más información Agrega un reglón a la matriz sales_mat_theat con el promedio de ventas totales, ingresos en la fechas de lanzamientos y salas de exhibición. Tip: Usa las funciones colMeans() y rbind(). avg_row &lt;- colMeans() rbind(sales_mat_theat, ) "],
["factores.html", "3.3 Factores", " 3.3 Factores Un factor en R es un tipo de vector con un enfoque estadístico que se usa para variables categóricas. La característica de un factor es que tiene un número limitado de valores llamados niveles. Existen dos tipos de variables categóricas: nominal u ordinal. En R un factor también se puden definir de esta forma. Las variables categóricas son comunes en bases de datos de encuestas. 3.3.1 Variable categórica nominal Un ejemplo de variable categórica nominal es el sexo de una persona: femenino (F) o masculino (M) sex_vec &lt;- c(&quot;F&quot;, &quot;M&quot;, &quot;M&quot;, &quot;F&quot;, &quot;M&quot;) En R un factor se define con la función factor(). sex_fct &lt;- factor(sex_vec) sex_fct ## [1] F M M F M ## Levels: F M En automático define los niveles del factor y los ordena en orden alfabético. Si se desea cambiar esto el argumento levels = c() permite asignar un vector de niveles específico. sex_lev_fct &lt;- factor(sex_vec, levels = c(&quot;M&quot;, &quot;F&quot;)) sex_lev_fct ## [1] F M M F M ## Levels: M F 3.3.2 Variable categórica ordinal Una variable categórica ordinal como el nombre lo dice tiene orden en los niveles del factor. Para dar orden a los niveles en R se modifica el argumento ordered = TRUE de la función factor(). Se tiene el siguiente vector de temperaturas y se desea crear un factor ordenado de menor temperatura a mayor temperatura. temp_vec &lt;- c(&quot;High&quot;, &quot;Low&quot;, &quot;Medium&quot;, &quot;Low&quot;, &quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;, &quot;Low&quot;, &quot;Medium&quot;, &quot;Low&quot;, &quot;Low&quot;) temp_fct &lt;- factor(temp_vec, levels = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;), ordered = T) temp_fct ## [1] High Low Medium Low Low Medium High Low Medium Low ## [11] Low ## Levels: Low &lt; Medium &lt; High Ahora los niveles tiene una jerarquía. levels(temp_fct) ## [1] &quot;Low&quot; &quot;Medium&quot; &quot;High&quot; Una forma de modificar las etiquetas de los niveles es reasignando un vector. levels(temp_fct) &lt;- c(&quot;L&quot;, &quot;M&quot;, &quot;H&quot;) temp_fct ## [1] H L M L L M H L M L L ## Levels: L &lt; M &lt; H 3.3.3 Resúmen de factores La función summary() permite resumir la información del vector. En particular para un factor calcula la frecuencia de cada nivel, lo que no sucede si es un caracter. summary(sex_vec) ## Length Class Mode ## 5 character character summary(sex_fct) ## F M ## 2 3 Ej: Analistas Se tienen 5 analistas, cada uno con las siguientes características de velocidad de trabajo. Analista 1: rápido Analista 2: normal Analista 3: normal Analista 4: rápido Analista 5: lento Crea un factor ordinal de analistas analistas_vec &lt;- c() analistas_fct &lt;- factor(, levels = , ordered = ) Comprueba si el analista 2 es más rápido que el analista 5. Tip: es una comparación &gt;. analistas_vec[] &gt; analistas_vec[] Este tipo de vector es importante porque los modelos estadísticos que desarrolles más adelante tratan diferente las variable numéricas y las variables categóricas. "],
["data-frame.html", "3.4 Dataframe", " 3.4 Dataframe Un dataframe es un objeto de dos dimensiones en R. Puede verse como un arreglo de vectores de la misma dimensión, similar a una matriz. La ventaja de un dataframe, es que a diferencia de una matriz, los vectores o columnas pueden ser de diferentes tipos. En general, funcionan para guardar tablas de datos. Donde las columnas representan variables y los renglones observaciones. Es similar a la carga de datos en paquetes estadísticos como SAS y SPSS. 3.4.1 Crear un dataframe En R se crean dataframes con la función data.frame(). Una forma de crear un dataframe es asignando vectores. muestra_df &lt;- data.frame(secuencia = 1:5, aleatorio = rnorm(5), letras = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;)) muestra_df ## secuencia aleatorio letras ## 1 1 -0.7527286 a ## 2 2 -0.2960406 b ## 3 3 0.1069921 c ## 4 4 0.7068984 d ## 5 5 0.1953435 e O bien, se pude transformar una matriz con la misma función. Tomemos los datos de los ingresos de las películas de la saga de HP y hagamos una matriz. sales_df &lt;- data.frame(sales_mat) sales_df ## total release_date ## 1. HP and the Sorcerer&#39;s Stone 497066400 141823200 ## 8. HP and the Deathly Hallows Part 2 426630300 189432500 ## 4. HP and the Goblet of Fire 401608200 142414700 ## 2. HP and the Chamber of Secrets 399302200 135197600 ## 5. HP and the Order of the Phoenix 377314200 99635700 ## 6. HP and the Half-Blood Prince 359788300 92756000 ## 3. HP and the Prisoner of Azkaban 357233500 134119300 ## 7. HP and the Deathly Hallows Part 1 328833900 138752100 3.4.2 Nombres de dimensiones Al igual que matrices, las funciones rownames() y colnames() permiten nombrar los renglones y columnas del objeto. colnames(sales_df) &lt;- c(&quot;total_grosses&quot;, &quot;opening_grosses&quot;) sales_df ## total_grosses opening_grosses ## 1. HP and the Sorcerer&#39;s Stone 497066400 141823200 ## 8. HP and the Deathly Hallows Part 2 426630300 189432500 ## 4. HP and the Goblet of Fire 401608200 142414700 ## 2. HP and the Chamber of Secrets 399302200 135197600 ## 5. HP and the Order of the Phoenix 377314200 99635700 ## 6. HP and the Half-Blood Prince 359788300 92756000 ## 3. HP and the Prisoner of Azkaban 357233500 134119300 ## 7. HP and the Deathly Hallows Part 1 328833900 138752100 3.4.3 Seleccion de elementos Para dataframes, ademas de seleccionar posiciones de renglones y columnas con [ , ], se puede usar el signo $. sales_df$total_grosses ## [1] 497066400 426630300 401608200 399302200 377314200 359788300 357233500 ## [8] 328833900 Usando este mismo signo se pueden agregar nuevas columnas al objeto. Por ejemplo, tomemos los títulos que se heredaron de la matriz como nombres de columnas. Incluyamos una variable al dataframe de los títulos como un factor. sales_df$title &lt;- factor(rownames(sales_df)) sales_df ## total_grosses opening_grosses ## 1. HP and the Sorcerer&#39;s Stone 497066400 141823200 ## 8. HP and the Deathly Hallows Part 2 426630300 189432500 ## 4. HP and the Goblet of Fire 401608200 142414700 ## 2. HP and the Chamber of Secrets 399302200 135197600 ## 5. HP and the Order of the Phoenix 377314200 99635700 ## 6. HP and the Half-Blood Prince 359788300 92756000 ## 3. HP and the Prisoner of Azkaban 357233500 134119300 ## 7. HP and the Deathly Hallows Part 1 328833900 138752100 ## title ## 1. HP and the Sorcerer&#39;s Stone 1. HP and the Sorcerer&#39;s Stone ## 8. HP and the Deathly Hallows Part 2 8. HP and the Deathly Hallows Part 2 ## 4. HP and the Goblet of Fire 4. HP and the Goblet of Fire ## 2. HP and the Chamber of Secrets 2. HP and the Chamber of Secrets ## 5. HP and the Order of the Phoenix 5. HP and the Order of the Phoenix ## 6. HP and the Half-Blood Prince 6. HP and the Half-Blood Prince ## 3. HP and the Prisoner of Azkaban 3. HP and the Prisoner of Azkaban ## 7. HP and the Deathly Hallows Part 1 7. HP and the Deathly Hallows Part 1 Ahora los títulos de las películas son un factor con los siguientes niveles: levels(sales_df$title) ## [1] &quot;1. HP and the Sorcerer&#39;s Stone&quot; ## [2] &quot;2. HP and the Chamber of Secrets&quot; ## [3] &quot;3. HP and the Prisoner of Azkaban&quot; ## [4] &quot;4. HP and the Goblet of Fire&quot; ## [5] &quot;5. HP and the Order of the Phoenix&quot; ## [6] &quot;6. HP and the Half-Blood Prince&quot; ## [7] &quot;7. HP and the Deathly Hallows Part 1&quot; ## [8] &quot;8. HP and the Deathly Hallows Part 2&quot; Como los títulos ya los tenemos como una variable podemos borrar los nombres de los renglones usando NULL. rownames(sales_df) &lt;- NULL sales_df ## total_grosses opening_grosses title ## 1 497066400 141823200 1. HP and the Sorcerer&#39;s Stone ## 2 426630300 189432500 8. HP and the Deathly Hallows Part 2 ## 3 401608200 142414700 4. HP and the Goblet of Fire ## 4 399302200 135197600 2. HP and the Chamber of Secrets ## 5 377314200 99635700 5. HP and the Order of the Phoenix ## 6 359788300 92756000 6. HP and the Half-Blood Prince ## 7 357233500 134119300 3. HP and the Prisoner of Azkaban ## 8 328833900 138752100 7. HP and the Deathly Hallows Part 1 Ej: Salas de cine Agrega una columna con el número de cines en los que se exhibió la película usando el vector que generamos antes theaters_vec. sales_df$theaters &lt;- sales_df 3.4.4 Orden de posiciones La función order() ordena el vector y regresa la posición de los elementos ordenados de menor a mayor. Siguiendo con el ejemplo de los ingresos de la saga, obtengamos el vector de posiciones de las películas ordenado por el total de ingresos. El vector de total de ingresos es el siguiente: sales_df$total_grosses ## [1] 497066400 426630300 401608200 399302200 377314200 359788300 357233500 ## [8] 328833900 El vector con las posiciones ordenadas total_order &lt;- order(sales_df$total_grosses) total_order ## [1] 8 7 6 5 4 3 2 1 Seleccionamos las posiciones del total de ingresos en el orden que nos dice el vector ordenado total_order para obtener el vector de ingresos ordenado. sales_df$total_grosses[total_order] ## [1] 328833900 357233500 359788300 377314200 399302200 401608200 426630300 ## [8] 497066400 De la misma forma, es posible ordenar el dataframe: sales_order_df &lt;- sales_df[ total_order , c(3, 1, 2)] sales_order_df ## title total_grosses opening_grosses ## 8 7. HP and the Deathly Hallows Part 1 328833900 138752100 ## 7 3. HP and the Prisoner of Azkaban 357233500 134119300 ## 6 6. HP and the Half-Blood Prince 359788300 92756000 ## 5 5. HP and the Order of the Phoenix 377314200 99635700 ## 4 2. HP and the Chamber of Secrets 399302200 135197600 ## 3 4. HP and the Goblet of Fire 401608200 142414700 ## 2 8. HP and the Deathly Hallows Part 2 426630300 189432500 ## 1 1. HP and the Sorcerer&#39;s Stone 497066400 141823200 Ej: Fechas de lanzamiento Agrega otra columna al dataframe sales_order_df con las fechas de lanzamiento del vector que se presenta a continuación. release_hp &lt;- c(&quot;11/16/01&quot;, &quot;7/15/11&quot;, &quot;11/18/05&quot;, &quot;11/15/02&quot;, &quot;7/11/07&quot;, &quot;7/15/09&quot;, &quot;6/4/04&quot;, &quot;11/19/10&quot;) names(release_hp) &lt;- titles_hp release_hp ## 1. HP and the Sorcerer&#39;s Stone 8. HP and the Deathly Hallows Part 2 ## &quot;11/16/01&quot; &quot;7/15/11&quot; ## 4. HP and the Goblet of Fire 2. HP and the Chamber of Secrets ## &quot;11/18/05&quot; &quot;11/15/02&quot; ## 5. HP and the Order of the Phoenix 6. HP and the Half-Blood Prince ## &quot;7/11/07&quot; &quot;7/15/09&quot; ## 3. HP and the Prisoner of Azkaban 7. HP and the Deathly Hallows Part 1 ## &quot;6/4/04&quot; &quot;11/19/10&quot; Existe un problema con este vector. Tiene el orden de la matriz original. Usando la función order() arregla la posición del vector con el orden de los títulos y este vector arreglado inclúyelo, finalmente, al df. sales_order_df$release_date &lt;- release_hp[] sales_order_df ## title total_grosses opening_grosses ## 8 7. HP and the Deathly Hallows Part 1 328833900 138752100 ## 7 3. HP and the Prisoner of Azkaban 357233500 134119300 ## 6 6. HP and the Half-Blood Prince 359788300 92756000 ## 5 5. HP and the Order of the Phoenix 377314200 99635700 ## 4 2. HP and the Chamber of Secrets 399302200 135197600 ## 3 4. HP and the Goblet of Fire 401608200 142414700 ## 2 8. HP and the Deathly Hallows Part 2 426630300 189432500 ## 1 1. HP and the Sorcerer&#39;s Stone 497066400 141823200 ## release_date ## 8 11/19/10 ## 7 6/4/04 ## 6 7/15/09 ## 5 7/11/07 ## 4 11/15/02 ## 3 11/18/05 ## 2 7/15/11 ## 1 11/16/01 3.4.5 Funciones útiles para data frames Existen algunas que ayudan a tratar dataframes. head() y tail(): head(sales_order_df) ## title total_grosses opening_grosses ## 8 7. HP and the Deathly Hallows Part 1 328833900 138752100 ## 7 3. HP and the Prisoner of Azkaban 357233500 134119300 ## 6 6. HP and the Half-Blood Prince 359788300 92756000 ## 5 5. HP and the Order of the Phoenix 377314200 99635700 ## 4 2. HP and the Chamber of Secrets 399302200 135197600 ## 3 4. HP and the Goblet of Fire 401608200 142414700 ## release_date ## 8 11/19/10 ## 7 6/4/04 ## 6 7/15/09 ## 5 7/11/07 ## 4 11/15/02 ## 3 11/18/05 tail(sales_order_df) ## title total_grosses opening_grosses ## 6 6. HP and the Half-Blood Prince 359788300 92756000 ## 5 5. HP and the Order of the Phoenix 377314200 99635700 ## 4 2. HP and the Chamber of Secrets 399302200 135197600 ## 3 4. HP and the Goblet of Fire 401608200 142414700 ## 2 8. HP and the Deathly Hallows Part 2 426630300 189432500 ## 1 1. HP and the Sorcerer&#39;s Stone 497066400 141823200 ## release_date ## 6 7/15/09 ## 5 7/11/07 ## 4 11/15/02 ## 3 11/18/05 ## 2 7/15/11 ## 1 11/16/01 str() str(sales_order_df) ## &#39;data.frame&#39;: 8 obs. of 4 variables: ## $ title : Factor w/ 8 levels &quot;1. HP and the Sorcerer&#39;s Stone&quot;,..: 7 3 6 5 2 4 8 1 ## $ total_grosses : num 3.29e+08 3.57e+08 3.60e+08 3.77e+08 3.99e+08 ... ## $ opening_grosses: num 1.39e+08 1.34e+08 9.28e+07 9.96e+07 1.35e+08 ... ## $ release_date : chr &quot;11/19/10&quot; &quot;6/4/04&quot; &quot;7/15/09&quot; &quot;7/11/07&quot; ... dim(), nrow() y ncol() nrow(sales_order_df) ## [1] 8 subset() avg_total_gr &lt;- mean(sales_order_df$total_grosses) subset(sales_order_df, total_grosses &gt; avg_total_gr) ## title total_grosses opening_grosses ## 4 2. HP and the Chamber of Secrets 399302200 135197600 ## 3 4. HP and the Goblet of Fire 401608200 142414700 ## 2 8. HP and the Deathly Hallows Part 2 426630300 189432500 ## 1 1. HP and the Sorcerer&#39;s Stone 497066400 141823200 ## release_date ## 4 11/15/02 ## 3 11/18/05 ## 2 7/15/11 ## 1 11/16/01 "],
["listas.html", "3.5 Listas", " 3.5 Listas Una lista en R es un objeto que permite una estructura de datos complicada, una super estructura. Esto porque permite reunir diferentes tipos de objetos: Vectores Matrices Dataframes Listas Es decir, puede almacenar cualquier cosa. Muchas funciones que usarás en el futuro, sobre todo de modelación, regresan resultados de estructuras complicadas y lo almacenan en listas. Por ejemplo, la función lm(). 3.5.1 Crear una lista La función list() permite crear una lista. ejem_list &lt;- list( vector = 1:10, matriz = matrix(1:9, nrow = 3), dataframe = mtcars[1:5,] ) ejem_list ## $vector ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## $matriz ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 ## ## $dataframe ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 3.5.2 Nombres de elementos Equivalente a un vector, la función names() permite extraer el nombre de cada elemento de la lista. names(ejem_list) ## [1] &quot;vector&quot; &quot;matriz&quot; &quot;dataframe&quot; También permite modificar los nombres. names(ejem_list) &lt;- c(&quot;vec&quot;, &quot;mat&quot;, &quot;df&quot;) ejem_list ## $vec ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## $mat ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 ## ## $df ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 La función length() nos dice cuantos elementos tiene la lista. length(ejem_list) ## [1] 3 3.5.3 Selección de elementos en una lista La selección de elementos de una lista puede realizarse de tres maneras: [ ] ejem_list[1] ## $vec ## [1] 1 2 3 4 5 6 7 8 9 10 [[ ]] ejem_list[[1]] ## [1] 1 2 3 4 5 6 7 8 9 10 $ ejem_list$vector ## NULL 3.5.4 Nuevos valores a la lista Existen dos formas de agregar nuevos valores a la lista. Supongamos que deseamos agregar a la lista de ejemplos un número aleatorio de la distribución normal. rand_num &lt;- rnorm(1) rand_num ## [1] 0.9364734 Una forma es usando la función combine c(), similar a un vector: ejem_list_random &lt;- c(ejem_list, random = rand_num) ejem_list_random ## $vec ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## $mat ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 ## ## $df ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## ## $random ## [1] 0.9364734 La segunda es usando el signo $ ejem_list_random$random_num &lt;- rand_num ejem_list_random ## $vec ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## $mat ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 ## ## $df ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## ## $random ## [1] 0.9364734 ## ## $random_num ## [1] 0.9364734 3.5.5 Funciones útiles para listas Algunas funciones que pueden ayudarte en un futuro para manipular listas son: unlist() unlist(ejem_list) ## vec1 vec2 vec3 vec4 vec5 vec6 vec7 vec8 ## 1.000 2.000 3.000 4.000 5.000 6.000 7.000 8.000 ## vec9 vec10 mat1 mat2 mat3 mat4 mat5 mat6 ## 9.000 10.000 1.000 2.000 3.000 4.000 5.000 6.000 ## mat7 mat8 mat9 df.mpg1 df.mpg2 df.mpg3 df.mpg4 df.mpg5 ## 7.000 8.000 9.000 21.000 21.000 22.800 21.400 18.700 ## df.cyl1 df.cyl2 df.cyl3 df.cyl4 df.cyl5 df.disp1 df.disp2 df.disp3 ## 6.000 6.000 4.000 6.000 8.000 160.000 160.000 108.000 ## df.disp4 df.disp5 df.hp1 df.hp2 df.hp3 df.hp4 df.hp5 df.drat1 ## 258.000 360.000 110.000 110.000 93.000 110.000 175.000 3.900 ## df.drat2 df.drat3 df.drat4 df.drat5 df.wt1 df.wt2 df.wt3 df.wt4 ## 3.900 3.850 3.080 3.150 2.620 2.875 2.320 3.215 ## df.wt5 df.qsec1 df.qsec2 df.qsec3 df.qsec4 df.qsec5 df.vs1 df.vs2 ## 3.440 16.460 17.020 18.610 19.440 17.020 0.000 0.000 ## df.vs3 df.vs4 df.vs5 df.am1 df.am2 df.am3 df.am4 df.am5 ## 1.000 1.000 0.000 1.000 1.000 1.000 0.000 0.000 ## df.gear1 df.gear2 df.gear3 df.gear4 df.gear5 df.carb1 df.carb2 df.carb3 ## 4.000 4.000 4.000 3.000 3.000 4.000 4.000 1.000 ## df.carb4 df.carb5 ## 1.000 2.000 str() str(ejem_list) ## List of 3 ## $ vec: int [1:10] 1 2 3 4 5 6 7 8 9 10 ## $ mat: int [1:3, 1:3] 1 2 3 4 5 6 7 8 9 ## $ df :&#39;data.frame&#39;: 5 obs. of 11 variables: ## ..$ mpg : num [1:5] 21 21 22.8 21.4 18.7 ## ..$ cyl : num [1:5] 6 6 4 6 8 ## ..$ disp: num [1:5] 160 160 108 258 360 ## ..$ hp : num [1:5] 110 110 93 110 175 ## ..$ drat: num [1:5] 3.9 3.9 3.85 3.08 3.15 ## ..$ wt : num [1:5] 2.62 2.88 2.32 3.21 3.44 ## ..$ qsec: num [1:5] 16.5 17 18.6 19.4 17 ## ..$ vs : num [1:5] 0 0 1 1 0 ## ..$ am : num [1:5] 1 1 1 0 0 ## ..$ gear: num [1:5] 4 4 4 3 3 ## ..$ carb: num [1:5] 4 4 1 1 2 "],
["ejercicios.html", "3.6 Ejercicios", " 3.6 Ejercicios 3.6.1 Ej: Hidden Figures IMDB Usando los siguientes objetos crea una lista de tres elementos con nombres: director, stars y reviews. director_hf &lt;- &quot;Theodore Melfi&quot; stars_hf &lt;- c( &quot;Taraji P. Henson&quot;, &quot;Octavia Spencer&quot;, &quot;Janelle Monáe&quot;, &quot;Kirsten Dunst&quot;, &quot;Kevin Costner&quot;, &quot;Jim Parsons&quot;, &quot;Mahershala Ali&quot;) reviews_hf &lt;- data.frame( scores = c(9, 6, 5, 10), source = c( rep(&quot;IMDB&quot;, 4) ), comments = c(&quot;It made for an old-fashioned movie going experience...&quot;, &quot;Evident Heroism, Hidden Doubts&quot;, &quot;OK, but very disappointing&quot;, &quot;Don&#39;t let Hidden Figures be a hidden treasure!&quot;) ) La lista se llama hidden_figures: hidden_figures &lt;- list( director = , stars = , reviews = ) str(hidden_figures) 3.6.2 Ej: Calificación promedio Extrae los scores de la película hidden_figures y con la función mean() calcula el promedio. Primero deberás extraer el elemento que contiene los scores. Es un dataframe. Después deberás seleccionar la columna de scores. Por último calcular el promedio y asignarlo a avg_reviews_hf. Tip: Usando la función str() sobre la lista ubica el nivel en el que esta el valor scores. reviews_df &lt;- hidden_figures reviews_vec &lt;- avg_reviews_hf &lt;- mean( ) avg_reviews_hf 3.6.3 Ej: Pesos a dolares El siguiente vector presenta el precio de la gasolina en diferentes localidades. gas_cdmx &lt;- c(15.82, 15.77, 15.83, 15.23, 14.95, 15.42, 15.55) gas_cdmx ## [1] 15.82 15.77 15.83 15.23 14.95 15.42 15.55 “¡Demasido rápido!” Usando la siguiente lista de tipo de cambio por mes: Julio: 17.3808 Agosto: 17.6084 Septiembre: 17.7659 Crea un dataframe donde cada variable/columnda sea el precio en dolares por cada mes. gas_usd_df &lt;- data.frame( julio = gas_cdmx/ agosto = septiembre = ) print(gas_usd_df) "],
["funciones.html", "Capítulo 4 Funciones", " Capítulo 4 Funciones Si todo lo que existe en R es un objeto, todo lo que pasa en R es una función. R es un lenguaje de programación funcional. Es decir, proporciona muchas herramientas para la creación y manipulación de funciones. En R las funciones, al igual que los vectores, se pueden asignar a variables, guardarlas en listas, usarlas como argumentos en otras funciones, crearlas dentro de otras funciones, e incluso regresar como resultado de una función más funciones. Una caja negra Una función puede verse como una caja negra que realiza un proceso o serie de instrucciones condicionadas a un valor de entrada cuyo resultas es un valor de salida. En R existen algunas funciones pre cargadas que ya hemos usado en ejercicios pasados. Por ejemplo: la función mean(). input &lt;- c(1:5) output &lt;- mean( input ) output ## [1] 3 Sin embargo, también es posible escribir nuestras propias funciones. "],
["escibir-una-funcion.html", "4.1 Escibir una función", " 4.1 Escibir una función En R es posible escribir funciones y es muy recomendable para dar soluciones a problemas simples. Existen ocasiones en las que al programar copias y pegas cierto código varias veces para una meta en especial. En ese momento, es necesario pasar el código a una función. Una función soluciona un problema en particular. La función function() nos permite crear funciones con la siguiente estructura: my_fun &lt;- function( arg1 ){ body return() } En general, esta estructura se respeta en las funciones predeterminadas de R. Creamos una función que sume uno a cualquier número. suma_uno_fun &lt;- function( x ){ y = x + 1 return(y) } Aplicamos la función: suma_uno_fun(5) ## [1] 6 Podemos ver que en nuestra sesión ya existe la función con la función ls(). ls() ## [1] &quot;input&quot; &quot;output&quot; &quot;suma_uno_fun&quot; Esta función en lista los objetos existente en la sesión actual. "],
["argumentos-de-funciones.html", "4.2 Argumentos de funciones", " 4.2 Argumentos de funciones En R los argumentos de las funciones pueden llamarse por posición o nombre. Por ejemplo, considerando la siguiente función en la que se eleva un numero a un exponente determinado. potencia_fun &lt;- function(base, exponente){ base^exponente } Los argumentos pueden indicarse por posición: potencia_fun(2, 3) ## [1] 8 O bien por nombre: potencia_fun(exponente = 2, base = 3) ## [1] 9 4.2.1 Argumentos predeterminados En una función es posible asignar valores predeterminados a los argumentos. Por ejemplo, modificamos la función para asignar un valor predeterminado del exponente. potencia_default_fun &lt;- function(base, exponente = 2){ base^exponente } Al llamar la función, no es necesario definir un valor para el exponente y en automático tomará el valor exponente = 2. potencia_default_fun(2) ## [1] 4 4.2.2 Argumentos nulos Una función puede no tener argumentos y simplemente correr un proceso. En este caso, usaremos la función sample() que elige una muestra aleatoria de tamaño 1 de un vector de 1 a 6 imitando un dado dentro la la función lanza_dado(). lanza_dado &lt;- function() { numero &lt;- sample(1:6, size = 1) numero } Ahora tiraremos dos veces los dados. Primer lanzamiento: lanza_dado() ## [1] 4 Segundo lanzamiento: lanza_dado() ## [1] 5 "],
["alcance-de-la-funcion.html", "4.3 Alcance de la función", " 4.3 Alcance de la función Es importante mencionar que las variables que son definidas dentro de la función no son accesibles fuera de la función. Es decir, las funciones en R tienen un ambiente local. Por ejemplo, al correr la siguiente función e intentar imprimir el objeto x regresa un error. xs_fun &lt;- function(a){ x &lt;- 2 a*x } xs_fun(2) ## [1] 4 # print(x) La función crea un ambiente nuevo dentro de la misma, en caso de no encontrar el valor de la variable en el ambiente local, sube un nivel. Este nuevo nivel puede ser el ambiente global. Por ejemplo: y &lt;- 10 ys_fun &lt;- function(a){ a*y } ys_fun(2) ## [1] 20 Si la función está contenida en otra función, primero buscará en el ambiente local, después en el ambiente local de la función superior y luego en el ambiente global. Por ejemplo: y &lt;- 10 mas_uno_fun &lt;- function(a){ c &lt;- 1 y &lt;- 1 ys_add_fun &lt;- function(a){ a*y + c } ys_add_fun(a) } Si llamamos la función con un valor a = 2 al igual que en el ejemplo anterior, ¿por qué da el siguiente resultado y no 21 o 20? mas_uno_fun(a = 2) ## [1] 3 "],
["funciones-para-funciones.html", "4.4 Funciones para funciones", " 4.4 Funciones para funciones Algunas funciones útiles al manejar funciones son las funciones de ayuda para funciones predeterminadas. help() help(sd) ? ?sd O bien funciones para entender las partes de la función. body() body(suma_uno_fun) ## { ## y = x + 1 ## return(y) ## } args() args(mean.default) ## function (x, trim = 0, na.rm = FALSE, ...) ## NULL if() Una función que se usa al programar funciones es if() que permite agregar una condición. divide_fun &lt;- function(num, den){ if(den == 0){ return(&quot;Denominador es cero&quot;) }else{ return(num/den) } } Al ejecutar la función y tener cero en el denominador imprime el string. divide_fun(10, 0) ## [1] &quot;Denominador es cero&quot; Al no tener cero en el denominador la operación se ejecuta. divide_fun(10, 2) ## [1] 5 "],
["r-packages.html", "4.5 R Packages", " 4.5 R Packages Una de las ventajas de R es que se mantiene actualizado gracias a que tiene una activa comunidad. Solo en CRAN hay cerca de 4000 paquetes, lo que le da a R gran funcionalidad. Aprovechar la funcionalidad de R es la mejor forma de usarlo para análisis de datos. Una de las ventajas de R es que el código de los paquetes es abierto, incluyen documentación, y es reproducible. 4.5.1 Paquetes predeterminados R tiene siete paquetes predeterminados al iniciar una nueva sesión: base utils datasets methods stats graphics grDevices La función search() da la lista de los paquetes cargados en la sesión de R abierta. search() ## [1] &quot;.GlobalEnv&quot; &quot;package:stats&quot; &quot;package:graphics&quot; ## [4] &quot;package:grDevices&quot; &quot;package:utils&quot; &quot;package:datasets&quot; ## [7] &quot;Autoloads&quot; &quot;package:base&quot; 4.5.2 Instalar paquetes A pesar de los paquetes predeterminados, muchas veces es necesario instalar paquetes de CRAN. Existen dos formas de instalar paquetes al espacio de trabajo de R: Desde RStudio: Desde la consola: install.packages(&#39;nombre_del_paquete&#39;) Los paquetes se instalan una vez en el ambiente de trabajo local de R. No es necesario instalar los paquetes cada sesión nueva que abras. Sin embargo, al de descargar una nueva versión de R el ambiente de trabajo de R local cambia, por lo que deberás instalar de nuevo los paquetes. 4.5.3 Cargar paquetes Una vez instalados los paquetes, se cargan a la sesión de R en uso con la función library(). library(&#39;nombre_del_paquete&#39;) Los paquetes básicos que se recomiendan para análisis de datos y algunos que utilizaremos más adelante: tidyr manipulación de datos dplyr filtros, cálculos y agregación de datos. ggplot2 gráficas readr y readxl para leer datos lubridate para manejar fechas stringr para manipular caracteres Los paquetes se cargan en cada sesion nueva de R. "],
["ayuda-en-r.html", "4.6 Ayuda en R", " 4.6 Ayuda en R Existen diferentes formas de pedir ayuda en R. help.start(): ayuda en general help(fun) o ?fun: ayuda sobre la función fun apropos(&quot;fun&quot;): lista de funciones que contiene la palabra fun example(fun): muestra un ejemplo de la función fun help(read_csv) ?read_csv2 4.6.1 Vignettes En general los paquetes incluyen viñetas o vignettes de las funciones. Vignettes es documentación de temas o funciones sobre el paquete y en ocasiones incluyen algunos ejemplos. Para consultar viñetas: vignette(): muestra las viñetas disponibles sobre los paquetes instalados. vignette(&quot;nombre_de_librería&quot;): muestra la viñetas incluidas en la librería. Por ejemplo: vignette(&#39;ggplot2-specs&#39;) 4.6.2 Más referencias Si lo anterior no funciona se presentan los siguientes recursos: Buscar ayuda: Google, StackOverflow. Cheat sheets de RStudio Para aprender programación avanzada en R, el libro gratuito Advanced R de Hadley Wickham es una buena referencia. En particular es conveniente leer la guía de estilo (para todos: principiantes, intermedios y avanzados). Para aprender programación en R enfocada a la ciencia de datos, el libro gratuito R for Data Science de Hadley Wickham. Para mantenerse al tanto de las noticias de la comunidad de R pueden visitar R-bloggers. Para entretenerse en una tarde domingo pueden navegar los reportes en RPubs. "],
["ejercicios-1.html", "4.7 Ejercicios", " 4.7 Ejercicios 4.7.1 Ej: Suma de valores absolutos Crea una función que sume los valores absolutos de dos números. Los argumentos deben ser estos números. Tip: Usa la función abs() para obtener el valor absoluto de la función. suma_abs_fun &lt;- function(a, b){ } suma_abs_fun(-4, 2) ## [1] 6 4.7.2 Ej: Likes Considerando el siguiente vector de likes de cada día de la semana. likes &lt;- c(16, 7, 9, 20, 2, 17, 11) names(likes) &lt;- c(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;) likes ## Mon Tue Wed Thu Fri Sat Sun ## 16 7 9 20 2 17 11 Crea una función en la imprima Hoy fuiste popular si los likes del día fueron mayores a 15 y regrese el número de likes. Si el número de likes es menor a 15, entonces imprime :( y regresa 0. Usa la función print(). likes_fun &lt;- function(num) { if (num &gt; ) { print() return() } else { print() return() } } Prueba la función para el primer elemento del vector likes. likes_fun(likes[1]) 4.7.3 Ej: Grafica de gasolina El siguiente vector presenta el precio de la gasolina en diferentes localidades. gas_cdmx &lt;- c(15.82, 15.77, 15.83, 15.23, 14.95, 15.42, 15.55) gas_cdmx ## [1] 15.82 15.77 15.83 15.23 14.95 15.42 15.55 Completa la siguiente función tal que considerando el argumento tipo de cambio, imprima una grafica del vector en dolares y regrese este vector. grafica_dolar_fun &lt;- function(precio, tipo_cambio){ precio_en_dolar &lt;- precio/ print(plot()) return() } Considerando el tipo de cambio de los siguientes meses obten el vector y la grafica de cada mes. Julio: 17.3808 Agosto: 17.6084 gas_dolar_julio &lt;- grafica_dolar_fun(, 17.3808) gas_dolar_agosto &lt;- grafica_dolar_fun(, 17.6084) 4.7.4 Ej: Instala y carga Instala y carga en tu computadora los paquetes en listados antes. install.packages(readr) install.packages(readxl) install.packages(tidyr) install.packages(dplyr) install.packages(stringr) install.packages(ggplot) install.packages(lubridate) library(readr) library(readxl) library(lubridate) library(stringr) library(tidyr) library(dplyr) library(ggplot) 4.7.5 Ej: Search Después de cargar los paquetes llama el comando search() ¿Observas las nuevas librerías de la sesión? "],
["iteraciones.html", "Capítulo 5 Iteraciones", " Capítulo 5 Iteraciones Definición: Acto de repetir un proceso con la intención de alcanzar un objetivo o resultado. Replica automatizada de instrucciones. A cada repetición del proceso se le denomina una iteración. Looping, ciclar, iterar Existen dos tipos de iteraciones o loops: For: iteración condicionada a repetirse un número de veces fijo, controlado por un contador o índice que se incrementa con cada ciclo. for(k in 1:5){ print( paste(&quot;Iteración&quot;, k) ) } ## [1] &quot;Iteración 1&quot; ## [1] &quot;Iteración 2&quot; ## [1] &quot;Iteración 3&quot; ## [1] &quot;Iteración 4&quot; ## [1] &quot;Iteración 5&quot; While: iteración limitada a repetirse hasta que se cumple una condición lógica. k &lt;- 1 while(k &lt;= 5){ print( paste(&quot;Iteración&quot;, k) ) k &lt;- k + 1 } ## [1] &quot;Iteración 1&quot; ## [1] &quot;Iteración 2&quot; ## [1] &quot;Iteración 3&quot; ## [1] &quot;Iteración 4&quot; ## [1] &quot;Iteración 5&quot; "],
["for-loop-y-familia-apply.html", "5.1 For loop y familia Apply", " 5.1 For loop y familia Apply La familia de funciones apply pertenece a la librería base en R y facilitan la manipulación de datos de forma repetitiva. Las funciones de esta familia son: apply(), lapply(), sapply(), vapply(), mapply(), rapply(), and tapply(). La estructura de los datos de entrada y el formato del resultado o salida determinarán cual función usar. En este taller solo se verán las primeras tres funciones. 5.1.1 apply() Esta es la función que manipula arreglos homogéneos, en particular, se revisa el caso de matrices que son arreglos de dos dimensiones. La función tiene los siguientes argumentos: apply(X, MARGIN, FUN, ...) X representa el arreglo de dos dimensiones. MARGIN representa la dimensión sobre la que se va a resumir la información. Donde 1 = renglon o primera dimensión y 2 = columna o segunda dimensión. FUN representa la función que resume la información. Tomemos la siguiente matriz de simulaciones set.seed(1) mat_norm &lt;- matrix(rnorm(24, mean = 0, sd = 1), nrow = 4, ncol = 6) mat_norm ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] -0.6264538 0.3295078 0.5757814 -0.62124058 -0.01619026 0.91897737 ## [2,] 0.1836433 -0.8204684 -0.3053884 -2.21469989 0.94383621 0.78213630 ## [3,] -0.8356286 0.4874291 1.5117812 1.12493092 0.82122120 0.07456498 ## [4,] 1.5952808 0.7383247 0.3898432 -0.04493361 0.59390132 -1.98935170 Deseamos obtener la suma de cada columna de la matriz. El primer método, quizá el mas intuitivo en este momento, es obtener cada elemento o columna, aplicar la función a cada elemento y concatenar: prom_col_m1 &lt;- c(sum(mat_norm[, 1]), sum(mat_norm[, 2]), sum(mat_norm[, 3]), sum(mat_norm[, 4]), sum(mat_norm[, 5]), sum(mat_norm[, 6])) prom_col_m1 ## [1] 0.3168417 0.7347931 2.1720174 -1.7559432 2.3427685 -0.2136730 Segundo método prom_col_m2 &lt;- vector( length = ncol(mat_norm)) for(j in 1:ncol(mat_norm)){ prom_col_m2[j] &lt;- sum(mat_norm[, j]) } prom_col_m2 ## [1] 0.3168417 0.7347931 2.1720174 -1.7559432 2.3427685 -0.2136730 Tercer método prom_col_m3 &lt;- apply(X = mat_norm, MARGIN = 2, FUN = sum) prom_col_m3 ## [1] 0.3168417 0.7347931 2.1720174 -1.7559432 2.3427685 -0.2136730 Cuarto método prom_col_m4 &lt;- colSums(mat_norm) prom_col_m4 ## [1] 0.3168417 0.7347931 2.1720174 -1.7559432 2.3427685 -0.2136730 Ahora, para obtener la suma por renglón usando el tercer método de la función apply(), únicamente es necesario cambiar la dimensión sobre la que voy a resumir con el argumento MARGIN = 1. prom_row_m3 &lt;- apply(mat_norm, 1, sum) prom_row_m3 ## [1] 0.5603818 -1.4309408 3.1842987 1.2830648 Que es equivalente al primer método que usamos. prom_row_m1 &lt;- c(sum(mat_norm[1, ]), sum(mat_norm[2, ]), sum(mat_norm[3, ]), sum(mat_norm[4, ])) prom_row_m1 ## [1] 0.5603818 -1.4309408 3.1842987 1.2830648 La ventaja de usar la función apply() es que se puede usar cualquier función. Por ejemplo, obtener la desviación estándar. apply(mat_norm, 1, sd) ## [1] 0.6341809 1.1718660 0.8338847 1.2066403 O bien, una crear una función propia (definida por el usuario) con la función function() cv_vec_m3 &lt;- apply(mat_norm, 1, function(reng){ cv &lt;- mean(reng)/sd(reng) return(cv) }) cv_vec_m3 ## [1] 0.1472718 -0.2035131 0.6364386 0.1772228 Funciones Anónimas: A este tipo de funciones se les llama funciones anónimas porque no se nombran ni guardan en el ambiente de R y únicamente funcionan dentro del comando que las llama. 5.1.2 lapply() La función lapply() aplica una función sobre una lista o un vector y regresa el resultado en otra lista. Usando el vector de ciudades, ciudades_vec &lt;- c(&quot;Aguascalientes&quot;, &quot;Monterrey&quot;, &quot;Guadalajara&quot;, &quot;México&quot;) ciudades_vec ## [1] &quot;Aguascalientes&quot; &quot;Monterrey&quot; &quot;Guadalajara&quot; &quot;México&quot; res_nchar_l &lt;- lapply(ciudades_vec, nchar) res_nchar_l ## [[1]] ## [1] 14 ## ## [[2]] ## [1] 9 ## ## [[3]] ## [1] 11 ## ## [[4]] ## [1] 6 Esta función permite implementar funciones que regresen objetos de diferentes tipos, porque la listas permiten almacenar contenido heterogéneo. La función lapply() permite incluir argumentos de las funciones que implementa. Estos argumentos se incluyen dentro de lapply() despues de la función a implementar. Por ejemplo, usamos la función potencia que se creó antes. potencia_fun &lt;- function(base, exponente){ base^exponente } El objetivo es aplicar a cada elemento de la siguiente lista la función potencia y elevarlo al cubo. nums_lista &lt;- list(1, 3, 4) nums_lista ## [[1]] ## [1] 1 ## ## [[2]] ## [1] 3 ## ## [[3]] ## [1] 4 En la función lapply() se agrega el argumento exponente = 3 como último argumento. potencia_lista &lt;- lapply(nums_lista, potencia_fun, exponente = 3) potencia_lista ## [[1]] ## [1] 1 ## ## [[2]] ## [1] 27 ## ## [[3]] ## [1] 64 Una forma de reducir la lista obtenida a un vector es con la función unlist() que vimos antes. unlist(potencia_lista) ## [1] 1 27 64 5.1.3 sapply() La función sapply() es muy similar a lapply(). La única diferencia es la s que surge de simplified apply. Al igual que lapply() aplica una función sobre una lista o un vector pero simplifica el resultado en un arreglo. res_nchar_s &lt;- sapply(ciudades_vec, nchar) res_nchar_s ## Aguascalientes Monterrey Guadalajara México ## 14 9 11 6 Esta función es peligrosa ya que únicamente simplifica la estructura del resultado cuando es posible, de lo contrario, regresará una lista igual que lapply(). "],
["while-loop.html", "5.2 While Loop", " 5.2 While Loop Este tipo de iteraciones implementan un proceso hasta que una condición se cumple. Por ejemplo: ctr &lt;- 0 while(ctr &lt;= 7){ print( paste(&quot;El valor de ctr&quot;, ctr)) print( paste(&quot;El resultado de la condicion&quot;, ctr &lt;= 7)) print(ctr) ctr = ctr + 1 } ## [1] &quot;El valor de ctr 0&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] 0 ## [1] &quot;El valor de ctr 1&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] 1 ## [1] &quot;El valor de ctr 2&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] 2 ## [1] &quot;El valor de ctr 3&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] 3 ## [1] &quot;El valor de ctr 4&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] 4 ## [1] &quot;El valor de ctr 5&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] 5 ## [1] &quot;El valor de ctr 6&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] 6 ## [1] &quot;El valor de ctr 7&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] 7 Existen ocasiones en las que la condición puede tardar mucho en cimplirse o incluso no cumplirse y queremos interrumpir el loop. La función break() o break statement nos permite hacerlo. ctr &lt;- 1 while(ctr &lt;= 7){ print( paste(&quot;El valor de ctr&quot;, ctr)) print( paste(&quot;El resultado de la condicion&quot;, ctr &lt;= 7)) if((ctr %% 5) == 0){ break() } ctr = ctr + 1 } ## [1] &quot;El valor de ctr 1&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] &quot;El valor de ctr 2&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] &quot;El valor de ctr 3&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] &quot;El valor de ctr 4&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; ## [1] &quot;El valor de ctr 5&quot; ## [1] &quot;El resultado de la condicion TRUE&quot; "],
["ejercicios-2.html", "5.3 Ejercicios", " 5.3 Ejercicios 5.3.1 Ej: Ciudad de México Considerando la lista siguiente, cdmx_list &lt;- list( pop = 8918653, delegaciones = c(&quot;Alvaro Obregón&quot;, &quot;Azcapotzalco&quot; ,&quot;Benito Juárez&quot; , &quot;Coyoacán&quot; ,&quot;Cuajimalpa de Morelos&quot; ,&quot;Cuauhtémoc&quot; , &quot;Gustavo A. Madero&quot; , &quot;Iztacalco&quot; ,&quot;Iztapalapa&quot; , &quot;Magdalena Contreras&quot; ,&quot;Miguel Hidalgo&quot; ,&quot;Milpa Alta&quot; , &quot;Tláhuac&quot; ,&quot;Tlalpan&quot; , &quot;Venustiano Carranza&quot; ,&quot;Xochimilco&quot;), capital = TRUE ) obten la clase de cada elemento con la función lapply(). lapply( , class) 5.3.2 Ej: Mínimo y máximo La siguiente función extrae la letra de menor posicion y mayor posicion en orden alfabético. min_max_fun &lt;- function(nombre){ nombre_sinespacios &lt;- gsub(&quot; &quot;, &quot;&quot;, nombre) letras &lt;- strsplit(nombre_sinespacios, split = &quot;&quot;)[[1]] c(minimo = min(letras), maximo = max(letras)) } Es decir, si incluímos las letras abcz la letra mínima es a y la máxima es z. min_max_fun(&quot;abcz&quot;) ## minimo maximo ## &quot;a&quot; &quot;z&quot; El siguiente vector incluye el nombre de las 16 delegaciones de la Ciudad de México. delegaciones &lt;- c(&quot;Alvaro Obregon&quot;, &quot;Azcapotzalco&quot; ,&quot;Benito Juarez&quot; , &quot;Coyoacan&quot; ,&quot;Cuajimalpa de Morelos&quot; ,&quot;Cuauhtemoc&quot; , &quot;Gustavo Madero&quot; , &quot;Iztacalco&quot; ,&quot;Iztapalapa&quot; , &quot;Magdalena Contreras&quot; ,&quot;Miguel Hidalgo&quot; ,&quot;Milpa Alta&quot; , &quot;Tlahuac&quot; ,&quot;Tlalpan&quot; , &quot;Venustiano Carranza&quot; ,&quot;Xochimilco&quot;) Aplica la función sapply() para obtener un arreglo con la letra máxima y mínima de cada nombre. sapply(, ) 5.3.3 Ej: Precio de la gasolina El siguiente vector incluye el precio de la gasolina en diferentes estados del país en julio de 2017. gas_cdmx &lt;- c(15.82, 15.77, 15.83, 15.23, 14.95, 15.42, 15.55) gas_cdmx ## [1] 15.82 15.77 15.83 15.23 14.95 15.42 15.55 Crea una función que convierta el precio a dolares suponiendo que un dolar equivale a 17.76 pesos. conv_fun &lt;- function(precio){ /17.76 return() } Usando la función lapply() convierte el precio de la gasolina a dolares. gas_cdmx_usd_lista &lt;- lapply(, conv_fun) Usa la función unlist() para convertir la lista a un vector. gas_cdmx_usd &lt;- unlist() print(gas_cdmx_usd) 5.3.4 Ej: Estadísticos importantes estadisticos &lt;- c(&quot;GAUSS:1777&quot;, &quot;BAYES:1702&quot;, &quot;FISHER:1890&quot;, &quot;PEARSON:1857&quot;) split_estadisticos &lt;- strsplit(estadisticos, split = &quot;:&quot;) split_estadisticos ## [[1]] ## [1] &quot;GAUSS&quot; &quot;1777&quot; ## ## [[2]] ## [1] &quot;BAYES&quot; &quot;1702&quot; ## ## [[3]] ## [1] &quot;FISHER&quot; &quot;1890&quot; ## ## [[4]] ## [1] &quot;PEARSON&quot; &quot;1857&quot; Usa la función predefinida tolower() y lapply() para convertir a minúsculas cada letra de la lista split_estadisticos. split_lower &lt;- lapply( , ) print(split_lower) 5.3.5 Ej: Nombres y fechas Usando el vector split_estadísticos del ejercicio anterior. Crea una función que regrese la primera posición. primera_pos_fun &lt;- function(lista){ } Crea una función que regrese la segunda posición. segunda_pos_fun &lt;- function(lista){ } Usando lapply() crea una lista con los nombres de los estadísticos y otra con la fecha de nacimiento. nombres &lt;- lapply() fechas &lt;- lapply() 5.3.6 Ej: Función anónima Usando una función anónima y el vector split_estadísticos en un solo lapply() o sapply() obten un vector compuesto de la primera posición, es decir el nombre, en minúsculas. Tip: si usas lapply() recuerda usar la función unlist(). nombre_estadisticos &lt;- (split_estadisticos, function(elemento){ tolower() }) nombre_estadisticos 5.3.7 Ej: Tempraturas En la siguiente lista se presenta el registro de temperatura de tres ciudades a las 07:00 am, 10:00 am, 01:00 pm, 04:00 pm y 07:00 pm. temp_lista &lt;- list( cdmx = c(13, 15, 19, 22, 20), guadalajara = c(18, 18, 22, 26, 27), tuxtla_gtz = c(22, 24, 29, 32, 28) ) str(temp_lista) ## List of 3 ## $ cdmx : num [1:5] 13 15 19 22 20 ## $ guadalajara: num [1:5] 18 18 22 26 27 ## $ tuxtla_gtz : num [1:5] 22 24 29 32 28 Completa la siguiente función que obtiene el promedio entre el valor mínimo y máximo registrados. promedio_extremos_fun &lt;- function(x) { ( min() + max() ) / 2 } Implementa la función a la lista y obten la temperatura promedio de extremos para cada ciudad usando lapply() y sapply(). lapply(,) sapply(,) 5.3.8 Ej: Reducción de velocidad Crea una función del tipo while en la que mientras la velocidad sea mayor a 50 km/hr se reduzca de la siguiente forma: Si es mayor a 80 km/hr se reducen 20 km/hr e imprime ¡Demasido rápido!. Si es menor o igual a 80km/hr se reducen únicamente 5 km/hr. velocidad_act &lt;- 140 while(velocidad_act &gt; ){ if(velocidad_act &gt; ){ print() velocidad_act &lt;- } if(velocidad_act &lt; ){ velocidad_act &lt;- } velocidad_act } "]
]
